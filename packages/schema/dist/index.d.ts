import { z } from 'zod';
export declare const NormOccurrence: z.ZodObject<{
    id: z.ZodString;
    source: z.ZodString;
    scientificName: z.ZodString;
    commonName: z.ZodOptional<z.ZodString>;
    eventDate: z.ZodOptional<z.ZodString>;
    eventYear: z.ZodOptional<z.ZodNumber>;
    eventMonth: z.ZodOptional<z.ZodNumber>;
    eventDay: z.ZodOptional<z.ZodNumber>;
    dateConfidence: z.ZodEnum<["high", "text_inferred_full", "text_inferred_month", "text_inferred_year", "none"]>;
    basisOfRecord: z.ZodOptional<z.ZodString>;
    isCaptive: z.ZodDefault<z.ZodBoolean>;
    decimalLatitude: z.ZodNumber;
    decimalLongitude: z.ZodNumber;
    coordinateUncertaintyInMeters: z.ZodOptional<z.ZodNumber>;
    issues: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    stateCode: z.ZodOptional<z.ZodString>;
    inUS: z.ZodDefault<z.ZodBoolean>;
    insideExpertRange: z.ZodOptional<z.ZodBoolean>;
    h3_r6: z.ZodOptional<z.ZodString>;
    h3_r5: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    source: string;
    scientificName: string;
    dateConfidence: "high" | "text_inferred_full" | "text_inferred_month" | "text_inferred_year" | "none";
    issues: string[];
    isCaptive: boolean;
    decimalLatitude: number;
    decimalLongitude: number;
    inUS: boolean;
    commonName?: string | undefined;
    eventDate?: string | undefined;
    eventYear?: number | undefined;
    eventMonth?: number | undefined;
    eventDay?: number | undefined;
    basisOfRecord?: string | undefined;
    coordinateUncertaintyInMeters?: number | undefined;
    stateCode?: string | undefined;
    insideExpertRange?: boolean | undefined;
    h3_r6?: string | undefined;
    h3_r5?: string | undefined;
}, {
    id: string;
    source: string;
    scientificName: string;
    dateConfidence: "high" | "text_inferred_full" | "text_inferred_month" | "text_inferred_year" | "none";
    decimalLatitude: number;
    decimalLongitude: number;
    commonName?: string | undefined;
    eventDate?: string | undefined;
    eventYear?: number | undefined;
    eventMonth?: number | undefined;
    eventDay?: number | undefined;
    issues?: string[] | undefined;
    basisOfRecord?: string | undefined;
    isCaptive?: boolean | undefined;
    coordinateUncertaintyInMeters?: number | undefined;
    stateCode?: string | undefined;
    inUS?: boolean | undefined;
    insideExpertRange?: boolean | undefined;
    h3_r6?: string | undefined;
    h3_r5?: string | undefined;
}>;
export type NormOccurrence = z.infer<typeof NormOccurrence>;
export declare const StrictRecentItem: z.ZodObject<{
    lat: z.ZodNumber;
    lon: z.ZodNumber;
    ts: z.ZodNumber;
    count: z.ZodOptional<z.ZodNumber>;
    tsMeta: z.ZodOptional<z.ZodEnum<["high", "approx_month", "approx_year"]>>;
}, "strip", z.ZodTypeAny, {
    lat: number;
    lon: number;
    ts: number;
    count?: number | undefined;
    tsMeta?: "high" | "approx_month" | "approx_year" | undefined;
}, {
    lat: number;
    lon: number;
    ts: number;
    count?: number | undefined;
    tsMeta?: "high" | "approx_month" | "approx_year" | undefined;
}>;
export type StrictRecentItem = z.infer<typeof StrictRecentItem>;
